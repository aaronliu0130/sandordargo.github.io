**Can you safely compare signed and unsigned integers?**

No, you cannot. You should avoid comparing signed and unsigned integers in order to avoid bad results.

```
int x = -3;
unsigned int y = 7;

std::cout << x - y << '\n';  // unsigned result, possibly 4294967286
std::cout << x + y << '\n';  // unsigned result: 4
std::cout << x * y << '\n';  // unsigned result, possibly 4294967275
std::cout << std::boolalpha;
std::cout << "-3 < 7:  " << (x < y) << std::endl; // false
std::cout << "-3 <= 7: " << (x <= y) << std::endl; // false
std::cout << "-3 > 7:  " << (x > y) << std::endl; // true
std::cout << "-3 => 7: " << (x >= y) << std::endl; //true
```

The reason behind is that `x` which is an `int` is casted into an `unsigned int` Due to the conversion, `x` becomes - depending on your platform - 4294967293 (2^32 -3).

You should avoid comparing signed with unsigned integers, unless you use C++20 and you have access to `std::cmp_equal` and to its friends. For more details, check out the referneces.

References:
- [C++ Core Guidelines: ES.100: Don’t mix signed and unsigned arithmetic](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es100-dont-mix-signed-and-unsigned-arithmetic)
- [Modernes C++: Safe Comparisons of Integrals with C++20](https://www.modernescpp.com/index.php/safe-comparisons-of-integrals-with-c-20)


"""Can you safely compare signed and unsigned integers?"""

"""<p><strong>Can you safely compare signed and unsigned integers?</strong></p>"""

"""<p>No, you cannot. You should avoid comparing signed and unsigned integers in order to avoid bad results...</p>"""

"""<p>No, you cannot. You should avoid comparing signed and unsigned integers in order to avoid bad results.</p>
<!-- HTML generated using hilite.me --><div style="background: #202020; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #6ab825; font-weight: bold">int</span> <span style="color: #d0d0d0">x</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">-</span><span style="color: #3677a9">3</span><span style="color: #d0d0d0">;</span>
<span style="color: #6ab825; font-weight: bold">unsigned</span> <span style="color: #6ab825; font-weight: bold">int</span> <span style="color: #d0d0d0">y</span> <span style="color: #d0d0d0">=</span> <span style="color: #3677a9">7</span><span style="color: #d0d0d0">;</span>

<span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">x</span> <span style="color: #d0d0d0">-</span> <span style="color: #d0d0d0">y</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #ed9d13">&#39;\n&#39;</span><span style="color: #d0d0d0">;</span>  <span style="color: #999999; font-style: italic">// unsigned result, possibly 4294967286</span>
<span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">x</span> <span style="color: #d0d0d0">+</span> <span style="color: #d0d0d0">y</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #ed9d13">&#39;\n&#39;</span><span style="color: #d0d0d0">;</span>  <span style="color: #999999; font-style: italic">// unsigned result: 4</span>
<span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">x</sp
an> <span style="color: #d0d0d0">*</span> <span style="color: #d0d0d0">y</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #ed9d13">&#39;\n&#39;</span><span style="color: #d0d0d0">;</span>  <span style="color: #999999; font-style: italic">// unsigned result, possibly 4294967275</span>
<span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">std::boolalpha;</span>
<span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #ed9d13">&quot;-3 &lt; 7:  &quot;</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">(x</span> <span style="color: #d0d0d0">&lt;</span> <span style="color: #d0d0d0">y)</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">std::endl;</span> <span style="color: #999999; font-style: italic">// false</span>
<span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #ed9d13">&quot;-3 &lt;= 7: &quot;</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">(x</span> <span style="color: #d0d0d0">&lt;=</span> <span style="color: #d0d0d0">y)</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">std::endl;</span> <span style="color: #999999; font-style: italic">// false</span>
<span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #ed9d13">&quot;-3 &gt; 7:  &quot;</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">(x</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #d0d0d0">y)</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">std::endl;</span> <span style="color: #999999; font-style: italic">// true</span>
<span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #ed9d13">&quot;-3 =&gt; 7: &quot;</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">(x</span> <span style="color: #d0d0d0">&gt;=</span> <span style="color: #d0d0d0">y)</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">std::endl;</span> <span style="color: #999999; font-style: italic">//true</span>
</pre></div>
<p>The reason behind is that <code>x</code> which is an <code>int</code> is casted into an <code>unsigned int</code> Due to the conversion, <code>x</code> becomes - depending on your platform - 4294967293 (2^32 -3).</p>
<p>You should avoid comparing signed with unsigned integers unless you use C++20 and you have access to <code>std::cmp_equal</code> and to its friends. For more details, check out the references.</p>
<p>References:</p>
<ul>
<li><a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es100-dont-mix-signed-and-unsigned-arithmetic">C++ Core Guidelines: ES.100: Don’t mix signed and unsigned arithmetic</a></li>
<li><a href="https://www.modernescpp.com/index.php/safe-comparisons-of-integrals-with-c-20">Modernes C++: Safe Comparisons of Integrals with C++20</a></li>
</ul>
"""
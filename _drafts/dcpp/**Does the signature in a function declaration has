**Does the signature in a function declaration has to match the signature in the function defintion?**

No, it does not. The const qualifier for parameters is only relevant for functions definitions, not function declarations.

For example, the following code is valid:

```
#include <iostream>
class MyClass {
public:
    void f(const int);
};

void MyClass::f(int a) {
    a = 42;
    std::cout << a << std::endl;
}

int main() {
    int a=5;
    MyClass c;
    c.f(a);
 
}
```

Even though the `const` in the function declaration would imply that it won't modify what you pass in. But it can. At the same time, it's not a big deal, as it will only modify its own copy, not the original variable.

Please note that as soon as we turn the parameter into a reference in both the declaration and the definition, the code stops compiling.

```cpp
#include <iostream>
class MyClass {
public:
    void f(const int&);
};

void MyClass::f(int& a) {
    a = 42;
    std::cout << a << std::endl;
}

int main() {
    int a=5;
    MyClass c;
    c.f(a);
    std::cout << a << std::endl;
 
}
/*
main.cpp:7:6: error: no declaration matches 'void MyClass::f(int&)'
    7 | void MyClass::f(int& a) {
      |      ^~~~~~~
main.cpp:4:10: note: candidate is: 'void MyClass::f(const int&)'
    4 |     void f(const int&);
      |          ^
main.cpp:2:7: note: 'class MyClass' defined here
    2 | class MyClass {
      |       ^~~~~~~
*/
```

But even for our original usecase, `clang-tidy` warns:
> Parameter 1 is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions



"""Does the signature in a function declaration has to match the signature in the function definition?"""

"""<p><strong>Does the signature in a function declaration has to match the signature in the function definition?</strong></p>"""

"""<p>No, it does not. The const qualifier for parameters is only relevant for functions definitions, not function declarations...</p>"""

"""<p>No, it does not. The const qualifier for parameters is only relevant for functions definitions, not function declarations.</p>
<p>For example, the following code is valid:</p>
<!-- HTML generated using hilite.me --><div style="background: #202020; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #cd2828; font-weight: bold">#include &lt;iostream&gt;</span>
<span style="color: #6ab825; font-weight: bold">class</span> <span style="color: #447fcf; text-decoration: underline">MyClass</span> <span style="color: #d0d0d0">{</span>
<span style="color: #d0d0d0">public:</span>
    <span style="color: #6ab825; font-weight: bold">void</span> <span style="color: #d0d0d0">f(</span><span style="color: #6ab825; font-weight: bold">const</span> <span style="color: #6ab825; font-weight: bold">int</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0">};</span>

<span style="color: #6ab825; font-weight: bold">void</span> <span style="color: #d0d0d0">MyClass::f(</span><span style="color: #6ab825; font-weight: bold">int</span> <span style="color: #d0d0d0">a)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #3677a9">42</span><span style="color: #d0d0d0">;</span>
    <span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">a</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">std::endl;</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #6ab825; font-weight: bold">int</span> <span style="color: #d0d0d0">main()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #6ab825; font-weight: bold">int</span> <span style="color: #d0d0d0">a=</span><span style="color: #3677a9">5</span><span style="color: #d0d0d0">;</span>
    <span style="color: #d0d0d0">MyClass</span> <span style="color: #d0d0d0">c;</span>
    <span style="color: #d0d0d0">c.f(a);</span>
 
<span style="color: #d0d0d0">}</span>
</pre></div>
<p>Even though the <code>const</code> in the function declaration would imply that it won&#39;t modify what you pass in. But it can. At the same time, it&#39;s not a big deal, as it will only modify its own copy, not the original variable.</p>
<p>Please note that as soon as we turn the parameter into a reference in both the declaration and the definition, the code stops compiling.</p>
<!-- HTML generated using hilite.me --><div style="background: #202020; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #cd2828; font-weight: bold">#include &lt;iostream&gt;</span>
<span style="color: #6ab825; font-weight: bold">class</span> <span style="color: #447fcf; text-decoration: underline">MyClass</span> <span style="color: #d0d0d0">{</span>
<span style="color: #d0d0d0">public:</span>
    <span style="color: #6ab825; font-weight: bold">void</span> <span style="color: #d0d0d0">f(</span><span style="color: #6ab825; font-weight: bold">const</span> <span style="color: #6ab825; font-weight: bold">int</span><span style="color: #d0d0d0">&amp;);</span>
<span style="color: #d0d0d0">};</span>

<span style="color: #6ab825; font-weight: bold">void</span> <span style="color: #d0d0d0">MyClass::f(</span><span style="color: #6ab825; font-weight: bold">int</span><span style="color: #d0d0d0">&amp;</span> <span style="color: #d0d0d0">a)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #3677a9">42</span><span style="color: #d0d0d0">;</span>
    <span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">a</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">std::endl;</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #6ab825; font-weight: bold">int</span> <span style="color: #d0d0d0">main()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #6ab825; font-weight: bold">int</span> <span style="color: #d0d0d0">a=</span><span style="color: #3677a9">5</span><span style="color: #d0d0d0">;</span>
    <span style="color: #d0d0d0">MyClass</span> <span style="color: #d0d0d0">c;</span>
    <span style="color: #d0d0d0">c.f(a);</span>
    <span style="color: #d0d0d0">std::cout</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">a</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #d0d0d0">std::endl;</span>
 
<span style="color: #d0d0d0">}</span>
<span style="color: #999999; font-style: italic">/*</span>
<span style="color: #999999; font-style: italic">main.cpp:7:6: error: no declaration matches &#39;void MyClass::f(int&amp;)&#39;</span>
<span style="color: #999999; font-style: italic">    7 | void MyClass::f(int&amp; a) {</span>
<span style="color: #999999; font-style: italic">      |      ^~~~~~~</span>
<span style="color: #999999; font-style: italic">main.cpp:4:10: note: candidate is: &#39;void MyClass::f(const int&amp;)&#39;</span>
<span style="color: #999999; font-style: italic">    4 |     void f(const int&amp;);</span>
<span style="color: #999999; font-style: italic">      |          ^</span>
<span style="color: #999999; font-style: italic">main.cpp:2:7: note: &#39;class MyClass&#39; defined here</span>
<span style="color: #999999; font-style: italic">    2 | class MyClass {</span>
<span style="color: #999999; font-style: italic">      |       ^~~~~~~</span>
<span style="color: #999999; font-style: italic">*/</span>
</pre></div>
<p>But even for our original use-case, <code>clang-tidy</code> warns:</p>
<blockquote>
<p>Parameter 1 is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions</p>
</blockquote>"""
<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.sandordargo.com/</id><title>Sandor Dargo's Blog</title><subtitle>Sandor Dargo writes about about C++, software development, books and stoic philosophy applied to software craftsmanship</subtitle> <updated>2024-03-20T20:28:46+01:00</updated> <author> <name>Sandor Dargo</name> <uri>https://www.sandordargo.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://www.sandordargo.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://www.sandordargo.com/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 Sandor Dargo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>C++23: Encoding related changes</title><link href="https://www.sandordargo.com/blog/2024/03/20/cpp23-encoding-related-changes" rel="alternate" type="text/html" title="C++23: Encoding related changes" /><published>2024-03-20T00:00:00+01:00</published> <updated>2024-03-20T00:00:00+01:00</updated> <id>https://www.sandordargo.com/blog/2024/03/20/cpp23-encoding-related-changes</id> <content src="https://www.sandordargo.com/blog/2024/03/20/cpp23-encoding-related-changes" /> <author> <name>Sandor Dargo</name> </author> <category term="dev" /> <summary> Today, we are going to go through a couple of changes introduced by C++23 where the common theme is encoding. These changes are all related to how the code we write will be encoded by the compiler. Often these papers don’t introduce big changes, simply the common and desirable behaviour got standardized. Yet, these are all important to have code that works as expected and that is portable betw... </summary> </entry> <entry><title>Tidy First? by Kent Beck</title><link href="https://www.sandordargo.com/blog/2024/03/16/tidy-first-by-kent-beck" rel="alternate" type="text/html" title="Tidy First? by Kent Beck" /><published>2024-03-16T00:00:00+01:00</published> <updated>2024-03-16T00:00:00+01:00</updated> <id>https://www.sandordargo.com/blog/2024/03/16/tidy-first-by-kent-beck</id> <content src="https://www.sandordargo.com/blog/2024/03/16/tidy-first-by-kent-beck" /> <author> <name>Sandor Dargo</name> </author> <category term="books" /> <summary> Let’s start by explaining what tidying means when it comes to software development. Maybe a decade ago, this book would have been called “Refactoring first?”, but the term “refactoring” got inflated when people started to refer to long pauses in feature development as such. Even worse, the most essential part of refactoring - it shouldn’t change the system’s behaviour - is not always respected.... </summary> </entry> <entry><title>Three key philosophies behind C++</title><link href="https://www.sandordargo.com/blog/2024/03/13/3-key-philosophies-behind-cpp" rel="alternate" type="text/html" title="Three key philosophies behind C++" /><published>2024-03-13T00:00:00+01:00</published> <updated>2024-03-13T00:00:00+01:00</updated> <id>https://www.sandordargo.com/blog/2024/03/13/3-key-philosophies-behind-cpp</id> <content src="https://www.sandordargo.com/blog/2024/03/13/3-key-philosophies-behind-cpp" /> <author> <name>Sandor Dargo</name> </author> <category term="dev" /> <summary> Recently, I had to refresh some training material for software engineers who are not new to programming but are new to C++. It’s a short introduction by all means and as participants are expected to know how to program in a C-like language (usually Java, Kotlin or Python), I don’t have to focus on syntax basis. I decided to follow this agenda for this first part of the course: A little bit ... </summary> </entry> <entry><title>My late discovery of std::filesystem - Part II</title><link href="https://www.sandordargo.com/blog/2024/03/06/std-filesystem-part2-iterate-over-directories" rel="alternate" type="text/html" title="My late discovery of std::filesystem - Part II" /><published>2024-03-06T00:00:00+01:00</published> <updated>2024-03-06T00:00:00+01:00</updated> <id>https://www.sandordargo.com/blog/2024/03/06/std-filesystem-part2-iterate-over-directories</id> <content src="https://www.sandordargo.com/blog/2024/03/06/std-filesystem-part2-iterate-over-directories" /> <author> <name>Sandor Dargo</name> </author> <category term="dev" /> <summary> Last week, we started to discuss the main parts of std::filesystem and we discovered how to work with paths, how to navigate up through the directory structure and how to move files and directories around. This week, we are going to see how to iterate over a directory structure based on different needs and expectations. Let’s start by simply listing the contents of a single directory. Iterat... </summary> </entry> <entry><title>My late discovery of std::filesystem - Part I</title><link href="https://www.sandordargo.com/blog/2024/02/28/std-filesystem-part1-paths-and-operations" rel="alternate" type="text/html" title="My late discovery of std::filesystem - Part I" /><published>2024-02-28T00:00:00+01:00</published> <updated>2024-02-28T00:00:00+01:00</updated> <id>https://www.sandordargo.com/blog/2024/02/28/std-filesystem-part1-paths-and-operations</id> <content src="https://www.sandordargo.com/blog/2024/02/28/std-filesystem-part1-paths-and-operations" /> <author> <name>Sandor Dargo</name> </author> <category term="dev" /> <summary> I know that this is not a new topic at all. But this blog in its roots is to document what I learn, and I haven’t used the filesystem library up until a few weeks ago. After the initial encounter, I deliberately spent a bit more time exploring it and I want to share what I found. I don’t want to go over the C++ Reference documentation and I also don’t want to simply repeat what Bartek already ... </summary> </entry> </feed>

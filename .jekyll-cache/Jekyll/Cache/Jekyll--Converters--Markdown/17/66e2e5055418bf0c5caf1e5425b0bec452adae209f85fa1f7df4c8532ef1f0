I"”<p>Why is it that #CleanCode is still the exception and not the norm in so many companies?</p>

<p>A very interesting question from <a href="https://twitter.com/MarcusBiel">Marcus Biel</a>, who was the Director of Developer Experience at RedHat at that time posted on <a href="https://www.linkedin.com/feed/update/urn:li:activity:6481563683385278464">LinkedIn</a>. That moment, I didn‚Äôt have the time to go deep on this topic, but I reread the answers a couple of months later.</p>

<!--more-->
<h2 id="its-them">It‚Äôs them!</h2>

<p>People pointed at two groups mostly:</p>
<ul>
  <li>project managers</li>
  <li>junior devs</li>
</ul>

<p>Project managers are guilty because they want no more than one thing: kicking new features and projects out on the software factory door. They don‚Äôt care about clean code at all, they don‚Äôt even understand what is technical debt and without that deeper understanding <em>‚Äúclean code‚Äù</em> (anyhow we define it) is expensive.</p>

<p>Besides, ‚Äú<a href="http://blog.cleancoder.com/uncle-bob/2014/06/20/MyLawn.html">the amount of new developers doubles every five years</a>‚Äù and they obviously don‚Äôt know to how code in a clean way and the math implies that there is simply not enough senior developers to mentor them.</p>

<p>While these are all true, they simply blame others and the circumstances. These explanations are childish as they lack self-responsibility.</p>

<p>But I also found some more interesting answers.</p>

<h2 id="its-us">It‚Äôs us!</h2>

<h3 id="we-have-to-say-no">We have to say no</h3>

<p>Eloy mentioned that in his opinion, sometimes it‚Äôs better to say no as a developer. Or at least gently warn people that if they continue like that they‚Äôd shoot themselves in the leg. I can‚Äôt agree with him more. Not surprisingly a conversation was spurred about the lack of mandate to say no as a developer, as an individual contributor. Again, it‚Äôs easier to blame the circumstances and others.</p>

<p>But as both Eloy and another person pointed out, there is more than one way to say no. One is to simply step aside and move to another project if you don‚Äôt feel that your expertise is welcome. Or you can be a bit harsher and remind your management that if they don‚Äôt trust you, they are free to fire you. If you are a seasoned developer, how difficult would it be to find another job? <a href="http://sandordargo.com/blog/2019/05/22/it-is-so-easy">It‚Äôs not so easy</a>, but still it‚Äôs better than staying at a position where you are not valued and trusted.</p>

<p>I liked this subthread a lot because it emphasizes the responsibility of the individual, it brings up professionalism. In my opinion, if you are a real professional, you must be able to say no. More than that it‚Äôs your duty to say so when you feel it‚Äôs appropriate! I know it‚Äôs difficult for the first time. But a good boss will value it. Even if due to some circumstances he will order you to take the dirty road, he would understand your reasons and not punish you for them. Well, if he is not a good boss maybe he‚Äôd be just pissed of. I already said. There are always other projects/companies to work for.</p>

<h3 id="clean-code-is-difficult">Clean code is difficult</h3>

<p>Speaking about professionalism and difficulties, another reply I liked was about saying that #CleanCode is hard. As it requires serious efforts (at least in the beginning) and discipline not to accept anything but the best. It‚Äôs not in the mainstream. What I like in this answer is that it doesn‚Äôt toss responsibility away. People - we - are lazy and disorganised. People - we - tend to go towards the least resistance and if mediocre performance is accepted by the team, the individuals - we - will just perform on a mediocre level.</p>

<p>If you want to perform constantly on a higher level, you have to set up a framework that will force you to meet higher standards. Most of the people are around average - no surprise, it‚Äôs fact by definition. If you can help others improve even better, but you are responsible for yourself. You have to <a href="">push yourself to be better</a>.</p>

<p>We have to <a href="http://sandordargo.com/blog/2018/02/28/setting-yourself-up-to-succeed">drive the technical change</a> and maybe the herd will follow you. Or at least a couple of them.</p>

<h2 id="lets-do-our-job">Let‚Äôs do our job!</h2>

<p>While it‚Äôs true that many project managers don‚Äôt even understand technical debt or clean code, I don‚Äôt see it as a problem. Do they understand inheritance, immutability or the difference between different types of memory allocations? Some surely do, but many don‚Äôt and it is not a problem. We <a href="http://sandordargo.com/blog/2019/02/27/do-your-job">do our job</a> and when we have to then we explain and answer questions.</p>

<p>As professionals, we have to argue and say no when we think so. Hopefully, you are hired to give your best, to share your expertise, not to just act a coding monkey. Read how <a href="https://www.yegor256.com/2015/02/23/haircut.html">Yegor Bugayenko despised his hairdresser</a> just because he did nothing but tried to please him.</p>

<p>I find that many people are afraid of acting as professionals. Sometimes it‚Äôs because of negligence. They simply don‚Äôt care. Do you remember <a href="https://en.wikipedia.org/wiki/Office_Space">Office Space</a>? <a href="https://www.youtube.com/watch?v=_iiOEQOtBlQ">Will I make another dime?</a> It‚Äôs somewhere understandable, but it most probably means that you are either not real professional or you are at the wrong place.</p>

<p>Sometimes, it‚Äôs due to impostor syndrome, which is normal. But you have to push through it. Others wrote about this in so <a href="https://dev.to/search?q=impostor%20syndrome">captivating words</a>.</p>

<p>Sometimes, it‚Äôs not negligence, just fear and lack of experience. Seniors have to show the way. Have to show that you can step up for your opinion. People with experience have to foster a safe environment which is safe to speak and stand up for your professional opinion. Sometimes, introducing tech debt is acceptable, but if you just keep feeling that your opinion is not respected and the debt is endlessly growing, probably you have to step aside.</p>

<p>And while it‚Äôs understandable that project managers don‚Äôt understand all the details about what we do and they don‚Äôt even care - why should they? - but it‚Äôs our responsibility to translate our points to their language. It‚Äôs not about ugly variable names, messed up indentations in vim. It‚Äôs also not about lines of code in a class or the cyclomatic complexity of a function. It‚Äôs solely about maintenance costs. <a href="https://amzn.to/2ShCI9I">Code Simplicity: The Fundamentals of Software</a> makes a very good job explaining this.</p>

<p>It‚Äôs difficult, I‚Äôve failed and will fail at it so many times, but we should give it a try and then keep trying. It‚Äôs our responsibility to make the management understand if they spend a little bit more, in the beginning, they will spend much less in the long run. Of course, it‚Äôs market pressure and stuff. Sometimes it‚Äôs more applicable, sometimes a little bit less. But do they like when their product hit the ground because of poor code? What if it means millions of dollars lost in revenue and market value? What if it means hundreds of lives?</p>

<h2 id="conclusion">Conclusion</h2>

<p>It‚Äôs difficult to define what clean code is. But probably it‚Äôs like hardcore pornography. You can‚Äôt really define it, but you know it when you see it. It‚Äôs difficult to describe clean code properly, but if you encounter a clean pull request you recognize it with a smile of satisfaction.</p>

<p>What we have to keep in mind that the responsible is always us. Never them. We have to raise our voices, we have to explain and educate. And in case, we have to step aside. That‚Äôs the only way towards more maintainable and reliable code bases. You think it‚Äôs an exaggeration today, but tomorrow you might understand that it can be a matter of life and death, not just professional pride!</p>
:ET
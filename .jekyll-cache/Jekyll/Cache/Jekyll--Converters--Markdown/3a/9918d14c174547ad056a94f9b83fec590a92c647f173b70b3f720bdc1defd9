I"\h<p>In this next part of <a href="http://sandordargo.com/blog/2019/01/30/stl-algos-intro">the big STL algorithm tutorial</a>, we will discover the 4 modifying sequence algorithms that fill in or generate data:
<!--more--></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">fill</code></li>
  <li><code class="language-plaintext highlighter-rouge">fill_n</code></li>
  <li><code class="language-plaintext highlighter-rouge">generate</code></li>
  <li><code class="language-plaintext highlighter-rouge">generate_n</code></li>
</ul>

<p>Let’s get started!</p>

<h2 id="fill"><code class="language-plaintext highlighter-rouge">fill</code></h2>

<p>This is a fairly simple algorithm that takes two iterators defining a range and value that it will assign to each and every element in the range.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span> <span class="c1">// a vector of 8 elements zero initialized</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"numbers after the initialization of the vector: "</span><span class="p">;</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">fill</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">numbers</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">fill</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span> <span class="n">numbers</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">51</span><span class="p">);</span> 

<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"numbers after filling up the vector: "</span><span class="p">;</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>

<span class="err"> </span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>When can you use it? If you want to initialize a vector with the same items, do use it, you can pass the value in the vector’s constructor like this:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span> <span class="c1">// a vector of 8 elements initialized to 42</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Otherwise, in case you need to create a vector with sequences of the same item as we did in the first example of the section, it comes quite handy.</p>

<h2 id="fill_n"><code class="language-plaintext highlighter-rouge">fill_n</code></h2>

<p><code class="language-plaintext highlighter-rouge">fill_n</code> is pretty similar to <code class="language-plaintext highlighter-rouge">fill</code>, the only difference is that while <code class="language-plaintext highlighter-rouge">fill</code> takes two iterators defining a range, <code class="language-plaintext highlighter-rouge">fill_n</code> takes one iterator pointing at the beginning of the range and instead of the second iterator, it takes a number indicating how many elements have to be filled.</p>

<p>Here is the example used for <code class="language-plaintext highlighter-rouge">fill</code> with the necessary changes:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span> <span class="c1">// a vector of 8 elements initialized to 42</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"numbers after the initialization of the vector: "</span><span class="p">;</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">fill_n</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">fill_n</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">51</span><span class="p">);</span> 

<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"numbers after filling up the vector: "</span><span class="p">;</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>

<span class="err"> </span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>What you really have to pay attention to is that pass in a valid number as a second parameter. If you don’t, it’s undefined behaviour. That means you cannot really know what would happen, but it’s better not to play with production code.</p>

<p>There might be no visible consequences. For example, when I changed the second fill command to update 5 items (the 9th is already out of the vector), I still get the expected output. But when I pass 8, so half of those are out of the vector’s bounds, I got a core dump when the vector’s memory is deallocated.</p>

<p>Just pay attention to pass in the good values.</p>

<h2 id="generate"><code class="language-plaintext highlighter-rouge">generate</code></h2>

<p>How <code class="language-plaintext highlighter-rouge">generate</code> works, is similar to <code class="language-plaintext highlighter-rouge">fill</code>. It also takes two iterators defining a range that has to be updated. The difference is that while <code class="language-plaintext highlighter-rouge">fill</code> takes a value as a third parameter, <code class="language-plaintext highlighter-rouge">generate</code> takes a - drumbeat, please - generator, that’s right!</p>

<p>But what is a generator?</p>

<p>It is any function that is called without any arguments and that returns a value convertible to those pointed by the iterators.</p>

<p>As it’s the simplest example, it can be just a function always returning the same value. It’s not very useful, especially not compared to <code class="language-plaintext highlighter-rouge">fill</code>, but let’s use it just to show how this algorithm works. As usual, the generator doesn’t have to be a function, it can be a function object or a lambda just as well.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span> <span class="c1">// a vector of 8 elements initialized to 0</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="k">auto</span> <span class="n">staticGenerator</span> <span class="o">=</span> <span class="p">[](){</span> <span class="k">return</span> <span class="mi">42</span><span class="p">;</span> <span class="p">};</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">generate</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">numbers</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">staticGenerator</span><span class="p">);</span>

<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"numbers after filling up the vector: "</span><span class="p">;</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>

<span class="err"> </span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It’s as simple as that.</p>

<p>To get random numbers, you have to use a random generator. How random generation works is outside the scope of this article.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;random&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span> <span class="c1">// a vector of 8 elements initialized to 0</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="c1">// Random generator beginning</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">random_device</span> <span class="n">rd</span><span class="p">;</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">mt19937</span> <span class="n">mt</span><span class="p">(</span><span class="n">rd</span><span class="p">());</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">uniform_real_distribution</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">distribution</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">);</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="k">auto</span> <span class="n">randomGenerator</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">distribution</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mt</span><span class="p">](){</span> <span class="k">return</span> <span class="n">distribution</span><span class="p">(</span><span class="n">mt</span><span class="p">);</span> <span class="p">};</span>
<span class="err"> </span> <span class="c1">// Random generator end</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">generate</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">numbers</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">randomGenerator</span><span class="p">);</span>

<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"numbers after filling up the vector: "</span><span class="p">;</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>

<span class="err"> </span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="generate_n"><code class="language-plaintext highlighter-rouge">generate_n</code></h2>

<p>If you read the last three sections with care, this one will not give you any surprise at all.</p>

<p>It works like <code class="language-plaintext highlighter-rouge">fill_n</code> in terms of passing in the values to be updated - a start iterator and a number of items -  and like <code class="language-plaintext highlighter-rouge">generate</code> in terms of generating the values to be assigned - a function not taking any parameter but returning a value that can be converted into to the target type.</p>

<p>Which one to use, <code class="language-plaintext highlighter-rouge">generate</code> or <code class="language-plaintext highlighter-rouge">generate_n</code>? It should depend on your use-case to see which provides better readability. If you focus on a range, then use <code class="language-plaintext highlighter-rouge">generate</code>, but if the number of items to be filled/generated is more important, use the <code class="language-plaintext highlighter-rouge">_n</code> version.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;random&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span> <span class="c1">// a vector of 8 elements initialized to 0</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="c1">// Random generator beginning</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">random_device</span> <span class="n">rd</span><span class="p">;</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">mt19937</span> <span class="n">mt</span><span class="p">(</span><span class="n">rd</span><span class="p">());</span>
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">uniform_real_distribution</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">distribution</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">);</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="k">auto</span> <span class="n">randomGenerator</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">distribution</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mt</span><span class="p">](){</span> <span class="k">return</span> <span class="n">distribution</span><span class="p">(</span><span class="n">mt</span><span class="p">);</span> <span class="p">};</span>
<span class="err"> </span> <span class="c1">// Random generator end</span>
<span class="err"> </span> 
<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">generate_n</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="mi">8</span><span class="p">,</span> <span class="n">randomGenerator</span><span class="p">);</span>

<span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"numbers after filling up the vector: "</span><span class="p">;</span>
<span class="err"> </span> <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="p">;</span>
<span class="err"> </span> <span class="p">}</span>

<span class="err"> </span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Today, we learned about 4 algorithms filling up values in a container. <code class="language-plaintext highlighter-rouge">fill</code> and <code class="language-plaintext highlighter-rouge">fill_n</code> put static values in a container, while <code class="language-plaintext highlighter-rouge">generate</code> and <code class="language-plaintext highlighter-rouge">generate_n</code> dynamically creates the values populating the target.</p>

<p>Their usage should depend on your use-case, whether you need a fixed number of generated values or a containerful of items.</p>

<p>Next time we’ll learn about the <code class="language-plaintext highlighter-rouge">remove</code> algorithms. Stay tuned!</p>
:ET
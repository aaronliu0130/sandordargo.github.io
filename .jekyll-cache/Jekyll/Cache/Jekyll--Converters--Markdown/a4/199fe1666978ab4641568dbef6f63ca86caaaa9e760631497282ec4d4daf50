I"N <p>In this next part of <a href="http://sandordargo.com/blog/2019/01/30/stl-algos-intro">the big STL algorithm tutorial</a>, we cover the partitioning operations - except for ranges which will be covered in a different series.
<!--more--></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">is_partitioned</code></li>
  <li><code class="language-plaintext highlighter-rouge">partition</code></li>
  <li><code class="language-plaintext highlighter-rouge">partition_copy</code></li>
  <li><code class="language-plaintext highlighter-rouge">stable_partition</code></li>
  <li><code class="language-plaintext highlighter-rouge">partition_point</code></li>
</ul>

<h2 id="is_partitioned"><code class="language-plaintext highlighter-rouge">is_partitioned</code></h2>
<p><code class="language-plaintext highlighter-rouge">std::is_partitioned</code> checks whether a range is partitioned by a given predicate. But what does <em>partitioned</em> mean?</p>

<p>Letâ€™s say that you have a list of cars and each car - among others - has an attribute of transmission. A carâ€™s gearbox is either manual or automatic. If a range of cars is considered partitioned, then all the manual cars will appear before all automatic. Or the other way around, depending on how the predicate is written.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
</span>
<span class="k">enum</span> <span class="k">class</span> <span class="nc">Transmission</span> <span class="p">{</span><span class="n">Automatic</span><span class="p">,</span> <span class="n">Manual</span><span class="p">};</span>

<span class="k">struct</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">horsePower</span><span class="p">;</span>
  <span class="n">Transmission</span> <span class="n">transmission</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span> <span class="n">unpartitionedCars</span> <span class="p">{</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">100</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">80</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">120</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
  <span class="p">};</span>

  <span class="n">std</span><span class="o">::</span><span class="n">vector</span> <span class="n">partitionedCars</span> <span class="p">{</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">80</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">100</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">120</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
  <span class="p">};</span>

  <span class="k">auto</span> <span class="n">isManual</span> <span class="o">=</span> <span class="p">[](</span><span class="k">const</span> <span class="n">Car</span><span class="o">&amp;</span> <span class="n">car</span> <span class="p">){</span> <span class="k">return</span> <span class="n">car</span><span class="p">.</span><span class="n">transmission</span> <span class="o">==</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">;};</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">;</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"unpartitionedCars is_partitioned? "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">is_partitioned</span><span class="p">(</span>
    <span class="n">unpartitionedCars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">unpartitionedCars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"partitionedCars is_partitioned? "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">is_partitioned</span><span class="p">(</span>
    <span class="n">partitionedCars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">partitionedCars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="p">}</span>
<span class="cm">/*
unpartitionedCars is_partitioned? false
partitionedCars is_partitioned? true
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>As you can see, the usage is simple, first, you pass in the range by the usual begin/end iterator pairs, then your predicate as a lambda, functor or function pointer.</p>

<p>Youâ€™ll always get a simple boolean as an answer.</p>

<h2 id="partition"><code class="language-plaintext highlighter-rouge">partition</code></h2>

<p><code class="language-plaintext highlighter-rouge">partition</code> is a solicitation. Calling <code class="language-plaintext highlighter-rouge">partition</code> means that you ask for your range to be partitioned.</p>

<p>Just as for <code class="language-plaintext highlighter-rouge">is_partitioned</code>, you pass in two iterators defining a range and a unary predicate, but this time your range might be modified.</p>

<p>All the items satisfying the passed in predicate will be moved to the front and the non-satisfying items will come only after. Itâ€™s worth to note that the original order between the satisfying/non-satisfying items is not necessarily kept. If you need that, you should use <code class="language-plaintext highlighter-rouge">stable_partition</code>.</p>

<p>As a result, youâ€™ll get an iterator pointing at the first element of the second group, so pointing at the first element not satisfying the predicate.</p>

<p>Letâ€™s see an example:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
</span>
<span class="k">enum</span> <span class="k">class</span> <span class="nc">Transmission</span> <span class="p">{</span><span class="n">Automatic</span><span class="p">,</span> <span class="n">Manual</span><span class="p">};</span>

<span class="k">struct</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">horsePower</span><span class="p">;</span>
  <span class="n">Transmission</span> <span class="n">transmission</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span> <span class="n">cars</span> <span class="p">{</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">100</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">80</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">250</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">120</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
  <span class="p">};</span>

  <span class="k">auto</span> <span class="n">isManual</span> <span class="o">=</span> <span class="p">[](</span><span class="k">const</span> <span class="n">Car</span><span class="o">&amp;</span> <span class="n">car</span> <span class="p">){</span> <span class="k">return</span> <span class="n">car</span><span class="p">.</span><span class="n">transmission</span> <span class="o">==</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">;};</span>
  <span class="k">auto</span> <span class="n">printCar</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">Car</span><span class="o">&amp;</span> <span class="n">car</span> <span class="p">){</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Car: "</span> <span class="o">&lt;&lt;</span> <span class="n">car</span><span class="p">.</span><span class="n">horsePower</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">isManual</span><span class="p">(</span><span class="n">car</span><span class="p">)</span> <span class="o">?</span> <span class="s">"manual"</span> <span class="o">:</span> <span class="s">"automatic"</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;};</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cars:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">for_each</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">printCar</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"cars is_partitioned? "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">is_partitioned</span><span class="p">(</span>
    <span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">partition</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">);</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cars:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">for_each</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">printCar</span><span class="p">);</span>  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"cars is_partitioned? "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">is_partitioned</span><span class="p">(</span>
    <span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>

<span class="p">}</span>
<span class="cm">/*
Cars:
Car: 100 automatic
Car: 80 manual
Car: 250 manual
Car: 120 automatic

cars is_partitioned? false

Cars:
Car: 250 manual
Car: 80 manual
Car: 100 automatic
Car: 120 automatic

cars is_partitioned? true
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="partition_copy"><code class="language-plaintext highlighter-rouge">partition_copy</code></h2>

<p><code class="language-plaintext highlighter-rouge">partition_copy</code> has a very similar functionality compared to <code class="language-plaintext highlighter-rouge">partition</code>. The only difference is that it leaves the original input range intact and instead it copies the partitioned element into another range.</p>

<p>In fact, into two other ranges and it makes this algorithm quite interesting and requires a bit more attention.</p>

<p>The first two parameters are defining the inputs, then there are two other iterators taken.</p>

<p>The first output iterator (third parameter) should point at the beginning of the range where you want to copy the elements satisfying the predicate (the predicate is to be passed as a fifth parameter.)</p>

<p>The second output iterator (fourth parameter) points at the beginning of the range where you want to copy the elements not matching the predicate.</p>

<p>There are a couple of things you have to make sure</p>
<ul>
  <li>as usual, the output ranges are defined by only their beginning. You either have to make sure that they are big enough to accommodate all the items that will be copied into them, or you pass an inserter iterator (<code class="language-plaintext highlighter-rouge">std::back_inserter</code>)</li>
  <li>the other noticeable items is that we have to output ranges and we have to make sure that there is no overlap between them. As we donâ€™t pass containers but iterators, we can easily pass iterators pointing to the same container, but if you donâ€™t like trouble, itâ€™s better to just create two different containers for the matching and non-matching elements and use them.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">partition_copy</code> returns a pair of iterators with the first pointing after the last matching copied element and the other pointing similarly after the last non-matching copied element.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
</span>
<span class="k">enum</span> <span class="k">class</span> <span class="nc">Transmission</span> <span class="p">{</span><span class="n">Automatic</span><span class="p">,</span> <span class="n">Manual</span><span class="p">};</span>

<span class="k">struct</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">horsePower</span><span class="p">;</span>
  <span class="n">Transmission</span> <span class="n">transmission</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span> <span class="n">cars</span> <span class="p">{</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">100</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">80</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">250</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">120</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
  <span class="p">};</span>

  <span class="k">auto</span> <span class="n">isManual</span> <span class="o">=</span> <span class="p">[](</span><span class="k">const</span> <span class="n">Car</span><span class="o">&amp;</span> <span class="n">car</span> <span class="p">){</span> <span class="k">return</span> <span class="n">car</span><span class="p">.</span><span class="n">transmission</span> <span class="o">==</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">;};</span>
  <span class="k">auto</span> <span class="n">printCar</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">Car</span><span class="o">&amp;</span> <span class="n">car</span> <span class="p">){</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Car: "</span> <span class="o">&lt;&lt;</span> <span class="n">car</span><span class="p">.</span><span class="n">horsePower</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">isManual</span><span class="p">(</span><span class="n">car</span><span class="p">)</span> <span class="o">?</span> <span class="s">"manual"</span> <span class="o">:</span> <span class="s">"automatic"</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;};</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cars:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">for_each</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">printCar</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  
  
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Car</span><span class="o">&gt;</span> <span class="n">manualCars</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Car</span><span class="o">&gt;</span> <span class="n">automaticCars</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">partition_copy</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">back_inserter</span><span class="p">(</span><span class="n">manualCars</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">back_inserter</span><span class="p">(</span><span class="n">automaticCars</span><span class="p">),</span> <span class="n">isManual</span><span class="p">);</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"manual Cars:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">for_each</span><span class="p">(</span><span class="n">manualCars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">manualCars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">printCar</span><span class="p">);</span>  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"automatic Cars:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">for_each</span><span class="p">(</span><span class="n">automaticCars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">automaticCars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">printCar</span><span class="p">);</span>  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="p">}</span>
<span class="cm">/*
Cars:
Car: 100 automatic
Car: 80 manual
Car: 250 manual
Car: 120 automatic

manual Cars:
Car: 80 manual
Car: 250 manual

automatic Cars:
Car: 100 automatic
Car: 120 automatic
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I found no guarantees, but it seems (not only based on the above example) that the relative order of the elements is preserved. Thatâ€™s something that was explicitly not guaranteed for <code class="language-plaintext highlighter-rouge">partition</code></p>

<h2 id="stable_partition"><code class="language-plaintext highlighter-rouge">stable_partition</code></h2>

<p>What was clearly said for <code class="language-plaintext highlighter-rouge">partition</code>, namely that the relative order of the elements partitioned into their categories is not kept, <code class="language-plaintext highlighter-rouge">stable_partition</code> has this guarantee.</p>

<p>If two items belong to the same category, their relative order will be the same before and after partitioning.</p>

<p>Apart from that, there is no difference between <code class="language-plaintext highlighter-rouge">partition</code> and <code class="language-plaintext highlighter-rouge">stable_partition</code>, there is no difference in the way you have to use them.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
</span>
<span class="k">enum</span> <span class="k">class</span> <span class="nc">Transmission</span> <span class="p">{</span><span class="n">Automatic</span><span class="p">,</span> <span class="n">Manual</span><span class="p">};</span>

<span class="k">struct</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">horsePower</span><span class="p">;</span>
  <span class="n">Transmission</span> <span class="n">transmission</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span> <span class="n">cars</span> <span class="p">{</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">100</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">80</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">250</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">120</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
  <span class="p">};</span>

  <span class="k">auto</span> <span class="n">isManual</span> <span class="o">=</span> <span class="p">[](</span><span class="k">const</span> <span class="n">Car</span><span class="o">&amp;</span> <span class="n">car</span> <span class="p">){</span> <span class="k">return</span> <span class="n">car</span><span class="p">.</span><span class="n">transmission</span> <span class="o">==</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">;};</span>
  <span class="k">auto</span> <span class="n">printCar</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">Car</span><span class="o">&amp;</span> <span class="n">car</span> <span class="p">){</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Car: "</span> <span class="o">&lt;&lt;</span> <span class="n">car</span><span class="p">.</span><span class="n">horsePower</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">isManual</span><span class="p">(</span><span class="n">car</span><span class="p">)</span> <span class="o">?</span> <span class="s">"manual"</span> <span class="o">:</span> <span class="s">"automatic"</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;};</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cars:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">for_each</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">printCar</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"cars is_partitioned? "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">is_partitioned</span><span class="p">(</span>
    <span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">stable_partition</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">);</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cars:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">for_each</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">printCar</span><span class="p">);</span>  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"cars is_partitioned? "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">is_partitioned</span><span class="p">(</span>
    <span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>

<span class="p">}</span>
<span class="cm">/*
Cars:
Car: 100 automatic
Car: 80 manual
Car: 250 manual
Car: 120 automatic

cars is_partitioned? false

Cars:
Car: 80 manual
Car: 250 manual
Car: 100 automatic
Car: 120 automatic

cars is_partitioned? true
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If you check the results of the example with the provided results of <code class="language-plaintext highlighter-rouge">partition</code> you can also observe that the relative order was not kept before, but<br />
now it is.</p>

<h2 id="partition_point"><code class="language-plaintext highlighter-rouge">partition_point</code></h2>

<p><code class="language-plaintext highlighter-rouge">partition_point</code> as its name suggests will return you the dividing point between the matching and non-matching points.</p>

<p>In other words, <code class="language-plaintext highlighter-rouge">partition_point</code> comes with a contract asking for already partitioned inputs. As usual, calls with invalid arguments are subject to undefined behaviour.</p>

<p><code class="language-plaintext highlighter-rouge">partition_point</code> returns an iterator past the end of the first partition, or the last element if all elements match the predicate. Just like <code class="language-plaintext highlighter-rouge">partition</code> or <code class="language-plaintext highlighter-rouge">stable_partition</code>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
</span>
<span class="k">enum</span> <span class="k">class</span> <span class="nc">Transmission</span> <span class="p">{</span><span class="n">Automatic</span><span class="p">,</span> <span class="n">Manual</span><span class="p">};</span>

<span class="k">struct</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">horsePower</span><span class="p">;</span>
  <span class="n">Transmission</span> <span class="n">transmission</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span> <span class="n">cars</span> <span class="p">{</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">100</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">80</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">250</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">},</span>
    <span class="n">Car</span><span class="p">{</span><span class="mi">120</span><span class="p">,</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Automatic</span><span class="p">},</span>
  <span class="p">};</span>

  <span class="k">auto</span> <span class="n">isManual</span> <span class="o">=</span> <span class="p">[](</span><span class="k">const</span> <span class="n">Car</span><span class="o">&amp;</span> <span class="n">car</span> <span class="p">){</span> <span class="k">return</span> <span class="n">car</span><span class="p">.</span><span class="n">transmission</span> <span class="o">==</span> <span class="n">Transmission</span><span class="o">::</span><span class="n">Manual</span><span class="p">;};</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">;</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"cars is_partitioned? "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">is_partitioned</span><span class="p">(</span>
    <span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="k">auto</span> <span class="n">partitionResult</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">partition</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">);</span>
  <span class="k">auto</span> <span class="n">partitionPoint</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">partition_point</span><span class="p">(</span><span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">);</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"cars is_partitioned? "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">is_partitioned</span><span class="p">(</span>
    <span class="n">cars</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cars</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">isManual</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"partitionResult == partitionPoint: "</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">partitionResult</span> <span class="o">==</span> <span class="n">partitionPoint</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="p">}</span>
<span class="cm">/*
cars is_partitioned? false
cars is_partitioned? true
partitionResult == partitionPoint:true
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Today, we learned about partitioning algorithms. They allow us to separate elements of a container based on any predicate we might want to define. Next time we are going to discuss sorting algorithms. Stay tuned!</p>

<h2 id="connect-deeper">Connect deeper</h2>

<p>If you found interesting this article, please <a href="http://eepurl.com/gvcv1j">subscribe to my personal blog</a> and letâ€™s connect on <a href="https://twitter.com/SandorDargo">Twitter</a>!</p>
:ET
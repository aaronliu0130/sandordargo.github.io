I"¥P<p>I love mentoring.</p>

<p>It requires a huge quantity of humility, and if you possess it, it will bring you tremendous benefits on a human as well as on a technical level.
<!--more--></p>

<p>A few weeks ago, I met with one of my mentees who told me that she finally started to work on interesting tasks. In the team, they have been doing pair programming, but they donâ€™t always have the time to go into deeper explanations. I asked Cathy if she faced some issues she would like to discuss and she came up with private inheritance that they tried to use with more-or-less success.</p>

<p>We talked a little bit about it, but I had to tell the truth that I had never used it since school probably, so I didnâ€™t remember exactly how it works.</p>

<p>Have you ever had teachers who returned questions as homework when he didnâ€™t know the answer?</p>

<p>I wanted to play. We opened up my laptop, connected to an online IDE/Compiler and started to have some fun.</p>

<h2 id="experimenting-with-non-public-inheritance">Experimenting with non-public inheritance</h2>

<p>We started to with a <a href="http://coliru.stacked-crooked.com/a/a34a8683841c5aea">simple example</a> of the usual public inheritance which worked as expected.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="n">Base</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="k">virtual</span> <span class="o">~</span><span class="n">Base</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="k">virtual</span> <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="p">{</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Base::x()</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="k">return</span> <span class="mi">41</span><span class="p">;</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="p">}</span>

<span class="nl">protected:</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="k">virtual</span> <span class="kt">int</span> <span class="n">y</span><span class="p">()</span> <span class="p">{</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Base::y()</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="k">return</span> <span class="mi">42</span><span class="p">;</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Derived::x()</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="k">return</span> <span class="n">Base</span><span class="o">::</span><span class="n">y</span><span class="p">();</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="n">Base</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Derived</span><span class="p">();</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><em>In this very example we take advantage of being able to access Derived::x(), through a pointer to <code class="language-plaintext highlighter-rouge">Base</code>. We call <code class="language-plaintext highlighter-rouge">Base::y()</code> from <code class="language-plaintext highlighter-rouge">Derived::x()</code> just to make a call from a function that is public in both <code class="language-plaintext highlighter-rouge">Base</code> and <code class="language-plaintext highlighter-rouge">Derived</code> to a protected function in Base.</em></p>

<p>Then we decided to take the experimental way combining with the methodology of <em>Compiler Driven Development</em>. We changed the public keyword in the inheritance to protected and recompiled waiting for the compilation errors.</p>

<p>This line didnâ€™t compile anymore.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">Base</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Derived</span><span class="p">();</span>
<span class="c1">// main.cpp:25:27: error: 'Base' is an inaccessible base of 'Derived'</span>
<span class="c1">// Â  25 | Â  Â  Base* p = new Derived();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Seemed reasonable, no big surprise at first sight. So I just changed that line and <a href="http://coliru.stacked-crooked.com/a/1278c6cefa4d0e0a">it compiled</a>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Derived</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Derived</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>As the next step, we changed the inheritance to private and clicked on the compile button. It expected the compilation to fail, I expected that <code class="language-plaintext highlighter-rouge">Base::y()</code> would be handled as private to <code class="language-plaintext highlighter-rouge">Derived</code> and as such in <code class="language-plaintext highlighter-rouge">Derived::x()</code> would fail to compile. But. It. Compiled.</p>

<p>This meant that something about non-public inheritance we didnâ€™t remember well or got completely misunderstood.</p>

<p>Letâ€™s stop for a second. Is this embarrassing?</p>

<p>It is.</p>

<p>I could start enumerating some excuses. But who cares? Nobody. And those excuses wouldnâ€™t matter anyway. What is important is that I realized I didnâ€™t know something well and I used the situation to learn something.</p>

<p>It was high time to open up some pages about non-public inheritance and re-read them carefully.</p>

<blockquote>
  <p><em>The access specifier of the inheritance doesnâ€™t affect the inheritance of the implementation. The implementation is always inherited based on the functionâ€™s access level. The inheritanceâ€™s access specifier only affects the accessibility of the class interface.</em></p>
</blockquote>

<p>This means that all the public and protected variables and functions will be useable from the derived class even when you use private inheritance.</p>

<p>On the other hand, those public and protected elements of the base class will not be accessible from the outside through the derived class.</p>

<p>When does this matter?</p>

<p>It counts when the next generation is born.</p>

<p>A grandchild of a base class, if its parent inherited privately from the base (the grandparentâ€¦), it wonâ€™t have any access to the baseâ€™s members and functions. Not even if they were originally protected or even public.</p>

<p>Just to make the point here is another example. You can play with it on <a href="http://coliru.stacked-crooked.com/a/656fbfb81aa5c7a2">coliru</a>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="n">Base</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="k">virtual</span> <span class="o">~</span><span class="n">Base</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="k">virtual</span> <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="p">{</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Base::x()</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="k">return</span> <span class="mi">41</span><span class="p">;</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="p">}</span>

<span class="nl">protected:</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="k">virtual</span> <span class="kt">int</span> <span class="n">y</span><span class="p">()</span> <span class="p">{</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Base::y()</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="k">return</span> <span class="mi">42</span><span class="p">;</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="p">}</span>

<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">private</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Derived::x()</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="k">return</span> <span class="n">Base</span><span class="o">::</span><span class="n">y</span><span class="p">();</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">SoDerived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Derived</span> <span class="p">{</span>
<span class="nl">public:</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"SoDerived::x()</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="err">Â </span> <span class="k">return</span> <span class="n">Base</span><span class="o">::</span><span class="n">y</span><span class="p">();</span> 
<span class="err">Â </span> <span class="err">Â </span> <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="n">SoDerived</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SoDerived</span><span class="p">();</span>
<span class="err">Â </span> <span class="err">Â </span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="what-is-private-inheritance-for">What is private inheritance for?</h2>

<p>We probably all learnt that inheritance is there for expressing is-a relationships, right?</p>

<p>If there is <code class="language-plaintext highlighter-rouge">Car</code> class inheriting from <code class="language-plaintext highlighter-rouge">Vehicle</code>, we can all say that a <code class="language-plaintext highlighter-rouge">Car</code> is a <code class="language-plaintext highlighter-rouge">Vehicle</code>. Then <code class="language-plaintext highlighter-rouge">Roadster</code> class inherits from <code class="language-plaintext highlighter-rouge">Car</code>, itâ€™s still a <code class="language-plaintext highlighter-rouge">Vehicle</code> having access to all <code class="language-plaintext highlighter-rouge">Vehicle</code> member( function)s.</p>

<p>But what if that inheritance between <code class="language-plaintext highlighter-rouge">Vehicle</code> and <code class="language-plaintext highlighter-rouge">Car</code> was private? Then that little shiny red <code class="language-plaintext highlighter-rouge">Roadster</code> will not have access to the interface of <code class="language-plaintext highlighter-rouge">Vehicle</code>, even if it publicly inherits from <code class="language-plaintext highlighter-rouge">Car</code> in the middle.</p>

<p>We simply cannot call it an is-a relationship anymore.</p>

<p>Itâ€™s a has-a relationship. <code class="language-plaintext highlighter-rouge">Derived</code> class, in this specific example <code class="language-plaintext highlighter-rouge">Car</code>, will have access to the <code class="language-plaintext highlighter-rouge">Base</code>(=&gt; <code class="language-plaintext highlighter-rouge">Vehicle</code>) and exposes it based on the access level, protected or private. Well, this latter means that itâ€™s not exposed. It serves as a private member.</p>

<p>In the case of protected, you might argue that well, <code class="language-plaintext highlighter-rouge">Roadster</code> still have access to <code class="language-plaintext highlighter-rouge">Vehicle</code>, that is true.</p>

<p>But you cannot create a <code class="language-plaintext highlighter-rouge">Roadster</code> as a <code class="language-plaintext highlighter-rouge">Vehicle</code>, in case of non-public inheritance this line will not compile.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Vehicle</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Roadster</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Just to repeat it, non-public inheritance in C++ expresses a has-a relationship.</p>

<p>Just like composition. So if we want to keep the analogy of cars, we can say that a <code class="language-plaintext highlighter-rouge">Car</code> can privately inherit from the hypothetical <code class="language-plaintext highlighter-rouge">Engine</code> class - while it still publicly inherits from <code class="language-plaintext highlighter-rouge">Vehicle</code>. And with this small latter addition of multiple inheritance, you probably got the point, why composition is easier to maintain than private inheritance.</p>

<p>But even if you have no intention of introducing an inheritance tree, I think private inheritance is not intuitive and itâ€™s so different from most of the other languages that itâ€™s simply disturbing to use it. Itâ€™s not evil at all, itâ€™ll be just more expensive to maintain.</p>

<p>Thatâ€™s exactly what you can find on the <a href="https://isocpp.org/wiki/faq/private-inheritance">ISO C++ page</a>.</p>

<blockquote>
  <p>Use composition when you can, private inheritance when you have to.</p>
</blockquote>

<p>But when do you have to use private inheritance?</p>

<p>According to the above reference ISO C++ page, you have a valid use-case when the following conditions apply:</p>

<ul>
  <li>The derived class has to make calls to (non-virtual) functions of the base</li>
  <li>The base has to invoke (usually pure-virtual) functions from the derived</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Today, I made the point that if the humble and more difficult road is taken, mentoring will pay off with great benefits to both parties. Recently, thatâ€™s how I (re)discovered non-public inheritance in C++.</p>

<p>Non-public inheritance is - to me - a syntactically more complicated way to express a <em>has-a</em> relationship compared to composition. Even though from time to time you might encounter use-cases, when it <a href="https://isocpp.org/wiki/faq/private-inheritance#priv-inherit-vs-compos">provides some benefits</a>, most often it just results in code that is more difficult to understand and maintain.</p>

<p>Hence, do as the C++ Standard FAQ says: <em>Use composition when you can, private inheritance when you have to.</em></p>

<p>Happy coding!</p>
:ET